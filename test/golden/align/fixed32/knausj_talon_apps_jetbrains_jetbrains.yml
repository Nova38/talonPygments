input: "# Requires https://plugins.jetbrains.com/plugin/10504-voice-code-idea\napp:\
  \ jetbrains\n-\ntag(): user.line_commands\ntag(): user.multiple_cursors\ntag():\
  \ user.splits\ntag(): user.tabs\n# multiple_cursors.py support end\n\n# Auto complete\n\
  complete: user.idea(\"action CodeCompletion\")\nperfect: user.idea(\"action CodeCompletion,action\
  \ CodeCompletion\")\nsmart: user.idea(\"action SmartTypeCompletion\")\n(done | finish):\
  \ user.idea(\"action EditorCompleteStatement\")\n# Copying\ngrab <number>: user.idea_grab(number)\n\
  # Actions\n(action | please): user.idea(\"action GotoAction\")\n(action | please)\
  \ <user.text>:\n    user.idea(\"action GotoAction\")\n    insert(text)\n# Refactoring\n\
  refactor: user.idea(\"action Refactorings.QuickListPopupAction\")\nrefactor <user.text>:\n\
  \    user.idea(\"action Refactorings.QuickListPopupAction\")\n    insert(text)\n\
  extract variable: user.idea(\"action IntroduceVariable\")\nextract field: user.idea(\"\
  action IntroduceField\")\nextract constant: user.idea(\"action IntroduceConstant\"\
  )\nextract parameter: user.idea(\"action IntroduceParameter\")\nextract interface:\
  \ user.idea(\"action ExtractInterface\")\nextract method: user.idea(\"action ExtractMethod\"\
  )\nrefactor in line: user.idea(\"action Inline\")\nrefactor move: user.idea(\"action\
  \ Move\")\nrefactor rename: user.idea(\"action RenameElement\")\nrename file: user.idea(\"\
  action RenameFile\")\nfix (format | formatting): user.idea(\"action ReformatCode\"\
  )\nfix imports: user.idea(\"action OptimizeImports\")\n#navigation\n(go declaration\
  \ | follow): user.idea(\"action GotoDeclaration\")\ngo implementation: user.idea(\"\
  action GotoImplementation\")\ngo usage: user.idea(\"action FindUsages\")\ngo type:\
  \ user.idea(\"action GotoTypeDeclaration\")\ngo test: user.idea(\"action GotoTest\"\
  )\ngo back: user.idea(\"action Back\")\ngo forward: user.idea(\"action Forward\"\
  )\n# Search\nfind (everywhere | all): user.idea(\"action SearchEverywhere\")\nfind\
  \ (everywhere | all) <user.text> [over]:\n    user.idea(\"action SearchEverywhere\"\
  )\n    sleep(500ms)\n    insert(text)\n(search | find) class: user.idea(\"action\
  \ GotoClass\")\n(search | find) file: user.idea(\"action GotoFile\")\n(search |\
  \ find) path: user.idea(\"action FindInPath\")\n(search | find) symbol: user.idea(\"\
  action GotoSymbol\")\n(search | find) symbol <user.text>$:\n    user.idea(\"action\
  \ GotoSymbol\")\n    insert(text)\n    key(\"enter\")\nrecent: user.idea(\"action\
  \ RecentFiles\")\n\nsurround [this] with <user.text> [over]:\n    idea(\"action\
  \ SurroundWith\")\n    sleep(500ms)\n    insert(text)\n# Making these longer to\
  \ reduce collisions with real code dictation.\ninsert generated <user.text> [over]:\n\
  \    user.idea(\"action Generate\")\n    sleep(500ms)\n    insert(text)\ninsert\
  \ template <user.text> [over]:\n    idea(\"action InsertLiveTemplate\")\n    sleep(500ms)\n\
  \    insert(text)\ncreate (template|snippet): user.idea(\"action SaveAsTemplate\"\
  )\n# Recording\ntoggle recording: user.idea(\"action StartStopMacroRecording\")\n\
  change (recording | recordings): user.idea(\"action EditMacros\")\nplay recording:\
  \ user.idea(\"action PlaybackLastMacro\")\nplay recording <user.text> [over]:\n\
  \    idea(\"action PlaySavedMacrosAction\")\n    insert(text)\n    sleep(500ms)\n\
  \    Key(\"enter\")\n# Marks\ngo mark: user.idea(\"action ShowBookmarks\")\ntoggle\
  \ mark: user.idea(\"action ToggleBookmark\")\ngo next mark: user.idea(\"action GotoNextBookmark\"\
  )\ngo last mark: user.idea(\"action GotoPreviousBookmark\")\ntoggle mark <number>:\
  \ user.idea(\"action ToggleBookmark{number}\")\ngo mark <number>: user.idea(\"action\
  \ GotoBookmark{number}\")\n# Folding\nexpand deep: user.idea(\"action ExpandRegionRecursively\"\
  )\nexpand all: user.idea(\"action ExpandAllRegions\")\ncollapse deep: user.idea(\"\
  action CollapseRegionRecursively\")\ncollapse all: user.idea(\"action CollapseAllRegions\"\
  )\n# miscellaneous\n# XXX These might be better than the structural ones depending\
  \ on language.\ngo next (method | function): user.idea(\"action MethodDown\")\n\
  go last (method | function): user.idea(\"action MethodUp\")\n# Clipboard\nclippings:\
  \ user.idea(\"action PasteMultiple\")\ncopy path: user.idea(\"action CopyPaths\"\
  )\ncopy reference: user.idea(\"action CopyReference\")\ncopy pretty: user.idea(\"\
  action CopyAsRichText\")\n# File Creation\ncreate sibling: user.idea(\"action NewElementSamePlace\"\
  )\ncreate sibling <user.text> [over]:\n    user.idea(\"action NewElementSamePlace\"\
  )\n    sleep(500ms)\n    insert(text)\ncreate file: user.idea(\"action NewElement\"\
  )\ncreate file <user.text> [over]:\n    user.idea(\"action NewElement\")\n    sleep(500ms)\n\
  \    insert(text)\n# Task Management\ngo task: user.idea(\"action tasks.goto\")\n\
  go browser task: user.idea(\"action tasks.open.in.browser\")\nswitch task: user.idea(\"\
  action tasks.switch\")\nclear task: user.idea(\"action tasks.close\")\nconfigure\
  \ servers: user.idea(\"action tasks.configure.servers\")\n# Git / Github (not using\
  \ verb-noun-adjective pattern, mirroring terminal commands.)\ngit pull: user.idea(\"\
  action Vcs.UpdateProject\")\ngit commit: user.idea(\"action CheckinProject\")\n\
  git push: user.idea(\"action CheckinProject\")\ngit log: user.idea(\"action Vcs.ShowTabbedFileHistory\"\
  )\ngit browse: user.idea(\"action Github.Open.In.Browser\")\ngit (gets | gist):\
  \ user.idea(\"action Github.Create.Gist\")\ngit (pull request | request): user.idea(\"\
  action Github.Create.Pull.Request\")\ngit (view | show | list) (requests | request):\
  \ user.idea(\"action Github.View.Pull.Request\")\ngit (annotate | blame): user.idea(\"\
  action Annotate\")\ngit menu: user.idea(\"action Vcs.QuickListPopupAction\")\n#\
  \ Tool windows:\n# Toggling various tool windows\ntoggle project: user.idea(\"action\
  \ ActivateProjectToolWindow\")\ntoggle find: user.idea(\"action ActivateFindToolWindow\"\
  )\ntoggle run: user.idea(\"action ActivateRunToolWindow\")\ntoggle debug: user.idea(\"\
  action ActivateDebugToolWindow\")\ntoggle events: user.idea(\"action ActivateEventLogToolWindow\"\
  )\ntoggle terminal: user.idea(\"action ActivateTerminalToolWindow\")\ntoggle git:\
  \ user.idea(\"action ActivateVersionControlToolWindow\")\ntoggle structure: user.idea(\"\
  action ActivateStructureToolWindow\")\ntoggle database: user.idea(\"action ActivateDatabaseToolWindow\"\
  )\ntoggle database changes: user.idea(\"action ActivateDatabaseChangesToolWindow\"\
  )\ntoggle make: user.idea(\"action ActivatemakeToolWindow\")\ntoggle to do: user.idea(\"\
  action ActivateTODOToolWindow\")\ntoggle docker: user.idea(\"action ActivateDockerToolWindow\"\
  )\ntoggle favorites: user.idea(\"action ActivateFavoritesToolWindow\")\ntoggle last:\
  \ user.idea(\"action JumpToLastWindow\")\n# Pin/dock/float\ntoggle pinned: user.idea(\"\
  action TogglePinnedMode\")\ntoggle docked: user.idea(\"action ToggleDockMode\")\n\
  toggle floating: user.idea(\"action ToggleFloatingMode\")\ntoggle windowed: user.idea(\"\
  action ToggleWindowedMode\")\ntoggle split: user.idea(\"action ToggleSideMode\"\
  )\n# Settings, not windows\ntoggle tool buttons: user.idea(\"action ViewToolButtons\"\
  )\ntoggle toolbar: user.idea(\"action ViewToolBar\")\ntoggle status [bar]: user.idea(\"\
  action ViewStatusBar\")\ntoggle navigation [bar]: user.idea(\"action ViewNavigationBar\"\
  )\n# Active editor settings\ntoggle power save: user.idea(\"action TogglePowerSave\"\
  )\ntoggle whitespace: user.idea(\"action EditorToggleShowWhitespaces\")\ntoggle\
  \ indents: user.idea(\"action EditorToggleShowIndentLines\")\ntoggle line numbers:\
  \ user.idea(\"action EditorToggleShowLineNumbers\")\ntoggle (bread crumbs | breadcrumbs):\
  \ user.idea(\"action EditorToggleShowBreadcrumbs\")\ntoggle gutter icons: user.idea(\"\
  action EditorToggleShowGutterIcons\")\ntoggle wrap: user.idea(\"action EditorToggleUseSoftWraps\"\
  )\ntoggle parameters: user.idea(\"action ToggleInlineHintsAction\")\n# Toggleable\
  \ views\ntoggle fullscreen: user.idea(\"action ToggleFullScreen\")\ntoggle distraction\
  \ [free mode]: user.idea(\"action ToggleDistractionFreeMode\")\ntoggle presentation\
  \ [mode]: user.idea(\"action TogglePresentationMode\")\n# Toggle additionals\ntoggle\
  \ comment: code.toggle_comment()\n# Quick popups\nchange scheme: user.idea(\"action\
  \ QuickChangeScheme\")\n# Always javadoc\n(toggle | pop) (doc | documentation):\
  \ user.idea(\"action QuickJavaDoc\")\n(pop deaf | toggle definition): user.idea(\"\
  action QuickImplementations\")\npop type: user.idea(\"action ExpressionTypeInfo\"\
  )\npop parameters: user.idea(\"action ParameterInfo\")\n# Breakpoints / debugging\n\
  go breakpoints: user.idea(\"action ViewBreakpoints\")\ntoggle [line] breakpoint:\
  \ user.idea(\"action ToggleLineBreakpoint\")\ntoggle method breakpoint: user.idea(\"\
  action ToggleMethodBreakpoint\")\nrun menu: user.idea(\"action ChooseRunConfiguration\"\
  )\nrun test: user.idea(\"action RunClass\")\nrun test again: user.idea(\"action\
  \ Rerun\")\ndebug test: user.idea(\"action DebugClass\")\nstep over: user.idea(\"\
  action StepOver\")\nstep into: user.idea(\"action StepInto\")\nstep smart: user.idea(\"\
  action SmartStepInto\")\nstep to line: user.idea(\"action RunToCursor\")\ncontinue:\
  \ user.idea(\"action Resume\")\n# Grow / Shrink\n(grow | shrink) window right: user.idea(\"\
  action ResizeToolWindowRight\")\n(grow | shrink) window left: user.idea(\"action\
  \ ResizeToolWindowLeft\")\n(grow | shrink) window up: user.idea(\"action ResizeToolWindowUp\"\
  )\n(grow | shrink) window down: user.idea(\"action ResizeToolWindowDown\")\n# Movement\n\
  go next (error | air): user.idea(\"action GotoNextError\")\ngo last (error | air):\
  \ user.idea(\"action GotoPreviousError\")\nfix next (error | air):\n    user.idea(\"\
  action GotoNextError\")\n    user.idea(\"action ShowIntentionActions\")\nfix last\
  \ (error | air):\n    user.idea(\"action GotoPreviousError\")\n    user.idea(\"\
  action ShowIntentionActions\")\n# Special Selects\nselect less: user.idea(\"action\
  \ EditorUnSelectWord\")\nselect (more|this): user.idea(\"action EditorSelectWord\"\
  )\n#jet brains-specific line commands. see line_commands.talon for generic ones\n\
  expand <number> until <number>:\n    user.select_range(number_1, number_2)\n   \
  \ user.idea(\"action ExpandRegion\")\ncollapse <number> until <number>:\n    user.select_range(number_1,\
  \ number_2)\n    user.idea(\"action CollapseRegion\")\npaste <number> until <number>:\n\
  \    user.select_range(number_1, number_2)\n    user.idea(\"action EditorPaste\"\
  )\nrefactor <number> until <number>:\n    user.select_range(number_1, number_2)\n\
  \    user.idea(\"action Refactorings.QuickListPopupAction\")\nclone <number>: user.line_clone(number)\n\
  \n#find/replace\nclear last <user.text> [over]: user.idea(\"find prev {text}, action\
  \ EditorBackSpace\")\nclear next <user.text> [over]: user.idea(\"find next {text},\
  \ action EditorBackSpace\")\ncomment last <user.text> [over]: user.idea(\"find prev\
  \ {text}, action CommentByLineComment\")\ncomment next <user.text> [over]: user.idea(\"\
  find next {text}, action CommentByLineComment\")\ngo last <user.text> [over]: user.idea(\"\
  find prev {text}, action EditorRight\")\ngo next <user.text> [over]: user.idea(\"\
  find next {text}, action EditorRight\")\npaste last <user.text> [over]: user.idea(\"\
  find prev {text}, action EditorRight, action EditorPaste\")\npaste next <user.text>\
  \ [over]: user.idea(\"find next {text}, action EditorRight, action EditorPaste\"\
  )\nrefactor last <user.text> [over]: user.idea(\"find prev {text}, action Refactorings.QuickListPopupAction\"\
  )\nrefactor next <user.text> [over]: user.idea(\"find next {text}, action Refactorings.QuickListPopupAction\"\
  )\nreplace last <user.text> [over]: user.idea(\"find prev {text}, action EditorPaste\"\
  )\nreplace next <user.text> [over]: user.idea(\"find next {text}, action EditorPaste\"\
  )\nselect last <user.text> [over]: user.idea(\"find prev {text}\")\nselect next\
  \ <user.text> [over]: user.idea(\"find next {text}\")\n\nselect camel left: user.extend_camel_left()\n\
  select camel right: user.extend_camel_right()\ngo camel left: user.camel_left()\n\
  go camel right: user.camel_right()\n\n# requires plug-in: black-pycharm\nblacken:\
  \ user.idea(\"action BLACKReformatCode\")\n"
output: |
  # Requires https://plugins.jetbrains.com/plugin/10504-voice-code-idea
  app: jetbrains

  -
  tag(): user.line_commands
  tag(): user.multiple_cursors
  tag(): user.splits
  tag(): user.tabs
  # multiple_cursors.py support end
  # Auto complete
  complete:
      user.idea("action CodeCompletion")

  perfect:
      user.idea("action CodeCompletion,action CodeCompletion")

  smart:
      user.idea("action SmartTypeCompletion")

  (done | finish):
      user.idea("action EditorCompleteStatement")

  # Copying
  grab <number>:                   user.idea_grab(number)

  # Actions
  (action | please):               user.idea("action GotoAction")

  (action | please) <user.text>:
      user.idea("action GotoAction")
      insert(text)

  # Refactoring
  refactor:
      user.idea("action Refactorings.QuickListPopupAction")

  refactor <user.text>:
      user.idea("action Refactorings.QuickListPopupAction")
      insert(text)

  extract variable:                user.idea("action IntroduceVariable")
  extract field:                   user.idea("action IntroduceField")
  extract constant:                user.idea("action IntroduceConstant")
  extract parameter:               user.idea("action IntroduceParameter")
  extract interface:               user.idea("action ExtractInterface")
  extract method:                  user.idea("action ExtractMethod")
  refactor in line:                user.idea("action Inline")
  refactor move:                   user.idea("action Move")
  refactor rename:                 user.idea("action RenameElement")
  rename file:                     user.idea("action RenameFile")
  fix (format | formatting):       user.idea("action ReformatCode")
  fix imports:                     user.idea("action OptimizeImports")

  # navigation
  (go declaration | follow):       user.idea("action GotoDeclaration")
  go implementation:               user.idea("action GotoImplementation")
  go usage:                        user.idea("action FindUsages")
  go type:                         user.idea("action GotoTypeDeclaration")
  go test:                         user.idea("action GotoTest")
  go back:                         user.idea("action Back")
  go forward:                      user.idea("action Forward")

  # Search
  find (everywhere | all):         user.idea("action SearchEverywhere")

  find (everywhere | all) <user.text> [over]:
      user.idea("action SearchEverywhere")
      sleep(500ms)
      insert(text)

  (search | find) class:           user.idea("action GotoClass")
  (search | find) file:            user.idea("action GotoFile")
  (search | find) path:            user.idea("action FindInPath")
  (search | find) symbol:          user.idea("action GotoSymbol")

  (search | find) symbol <user.text> $:
      user.idea("action GotoSymbol")
      insert(text)
      key("enter")

  recent:                          user.idea("action RecentFiles")

  surround [this] with <user.text> [over]:
      idea("action SurroundWith")
      sleep(500ms)
      insert(text)

  # Making these longer to reduce collisions with real code dictation.
  insert generated <user.text> [over]:
      user.idea("action Generate")
      sleep(500ms)
      insert(text)

  insert template <user.text> [over]:
      idea("action InsertLiveTemplate")
      sleep(500ms)
      insert(text)

  create (template | snippet):     user.idea("action SaveAsTemplate")

  # Recording
  toggle recording:                user.idea("action StartStopMacroRecording")
  change (recording | recordings): user.idea("action EditMacros")
  play recording:                  user.idea("action PlaybackLastMacro")

  play recording <user.text> [over]:
      idea("action PlaySavedMacrosAction")
      insert(text)
      sleep(500ms)
      Key("enter")

  # Marks
  go mark:                         user.idea("action ShowBookmarks")
  toggle mark:                     user.idea("action ToggleBookmark")
  go next mark:                    user.idea("action GotoNextBookmark")
  go last mark:                    user.idea("action GotoPreviousBookmark")
  toggle mark <number>:            user.idea("action ToggleBookmark{number}")
  go mark <number>:                user.idea("action GotoBookmark{number}")

  # Folding
  expand deep:                     user.idea("action ExpandRegionRecursively")
  expand all:                      user.idea("action ExpandAllRegions")
  collapse deep:                   user.idea("action CollapseRegionRecursively")
  collapse all:                    user.idea("action CollapseAllRegions")

  # miscellaneous
  # XXX These might be better than the structural ones depending on language.
  go next (method | function):     user.idea("action MethodDown")
  go last (method | function):     user.idea("action MethodUp")

  # Clipboard
  clippings:                       user.idea("action PasteMultiple")
  copy path:                       user.idea("action CopyPaths")
  copy reference:                  user.idea("action CopyReference")
  copy pretty:                     user.idea("action CopyAsRichText")

  # File Creation
  create sibling:                  user.idea("action NewElementSamePlace")

  create sibling <user.text> [over]:
      user.idea("action NewElementSamePlace")
      sleep(500ms)
      insert(text)

  create file:                     user.idea("action NewElement")

  create file <user.text> [over]:
      user.idea("action NewElement")
      sleep(500ms)
      insert(text)

  # Task Management
  go task:                         user.idea("action tasks.goto")
  go browser task:                 user.idea("action tasks.open.in.browser")
  switch task:                     user.idea("action tasks.switch")
  clear task:                      user.idea("action tasks.close")
  configure servers:               user.idea("action tasks.configure.servers")

  # Git / Github (not using verb-noun-adjective pattern, mirroring terminal commands.)
  git pull:
      user.idea("action Vcs.UpdateProject")

  git commit:
      user.idea("action CheckinProject")

  git push:
      user.idea("action CheckinProject")

  git log:
      user.idea("action Vcs.ShowTabbedFileHistory")

  git browse:
      user.idea("action Github.Open.In.Browser")

  git (gets | gist):
      user.idea("action Github.Create.Gist")

  git (pull request | request):
      user.idea("action Github.Create.Pull.Request")

  git (view | show | list) (requests | request):
      user.idea("action Github.View.Pull.Request")

  git (annotate | blame):
      user.idea("action Annotate")

  git menu:
      user.idea("action Vcs.QuickListPopupAction")

  # Tool windows:
  # Toggling various tool windows
  toggle project:
      user.idea("action ActivateProjectToolWindow")

  toggle find:
      user.idea("action ActivateFindToolWindow")

  toggle run:
      user.idea("action ActivateRunToolWindow")

  toggle debug:
      user.idea("action ActivateDebugToolWindow")

  toggle events:
      user.idea("action ActivateEventLogToolWindow")

  toggle terminal:
      user.idea("action ActivateTerminalToolWindow")

  toggle git:
      user.idea("action ActivateVersionControlToolWindow")

  toggle structure:
      user.idea("action ActivateStructureToolWindow")

  toggle database:
      user.idea("action ActivateDatabaseToolWindow")

  toggle database changes:
      user.idea("action ActivateDatabaseChangesToolWindow")

  toggle make:
      user.idea("action ActivatemakeToolWindow")

  toggle to do:
      user.idea("action ActivateTODOToolWindow")

  toggle docker:
      user.idea("action ActivateDockerToolWindow")

  toggle favorites:
      user.idea("action ActivateFavoritesToolWindow")

  toggle last:
      user.idea("action JumpToLastWindow")

  # Pin/dock/float
  toggle pinned:                   user.idea("action TogglePinnedMode")
  toggle docked:                   user.idea("action ToggleDockMode")
  toggle floating:                 user.idea("action ToggleFloatingMode")
  toggle windowed:                 user.idea("action ToggleWindowedMode")
  toggle split:                    user.idea("action ToggleSideMode")

  # Settings, not windows
  toggle tool buttons:             user.idea("action ViewToolButtons")
  toggle toolbar:                  user.idea("action ViewToolBar")
  toggle status [bar]:             user.idea("action ViewStatusBar")
  toggle navigation [bar]:         user.idea("action ViewNavigationBar")

  # Active editor settings
  toggle power save:
      user.idea("action TogglePowerSave")

  toggle whitespace:
      user.idea("action EditorToggleShowWhitespaces")

  toggle indents:
      user.idea("action EditorToggleShowIndentLines")

  toggle line numbers:
      user.idea("action EditorToggleShowLineNumbers")

  toggle (bread crumbs | breadcrumbs):
      user.idea("action EditorToggleShowBreadcrumbs")

  toggle gutter icons:
      user.idea("action EditorToggleShowGutterIcons")

  toggle wrap:
      user.idea("action EditorToggleUseSoftWraps")

  toggle parameters:
      user.idea("action ToggleInlineHintsAction")

  # Toggleable views
  toggle fullscreen:               user.idea("action ToggleFullScreen")
  toggle distraction [free mode]:  user.idea("action ToggleDistractionFreeMode")
  toggle presentation [mode]:      user.idea("action TogglePresentationMode")

  # Toggle additionals
  toggle comment:                  code.toggle_comment()

  # Quick popups
  change scheme:                   user.idea("action QuickChangeScheme")

  # Always javadoc
  (toggle | pop) (doc | documentation): user.idea("action QuickJavaDoc")
  (pop deaf | toggle definition):       user.idea("action QuickImplementations")
  pop type:                             user.idea("action ExpressionTypeInfo")
  pop parameters:                       user.idea("action ParameterInfo")

  # Breakpoints / debugging
  go breakpoints:                  user.idea("action ViewBreakpoints")
  toggle [line] breakpoint:        user.idea("action ToggleLineBreakpoint")
  toggle method breakpoint:        user.idea("action ToggleMethodBreakpoint")
  run menu:                        user.idea("action ChooseRunConfiguration")
  run test:                        user.idea("action RunClass")
  run test again:                  user.idea("action Rerun")
  debug test:                      user.idea("action DebugClass")
  step over:                       user.idea("action StepOver")
  step into:                       user.idea("action StepInto")
  step smart:                      user.idea("action SmartStepInto")
  step to line:                    user.idea("action RunToCursor")
  continue:                        user.idea("action Resume")

  # Grow / Shrink
  (grow | shrink) window right:    user.idea("action ResizeToolWindowRight")
  (grow | shrink) window left:     user.idea("action ResizeToolWindowLeft")
  (grow | shrink) window up:       user.idea("action ResizeToolWindowUp")
  (grow | shrink) window down:     user.idea("action ResizeToolWindowDown")

  # Movement
  go next (error | air):           user.idea("action GotoNextError")
  go last (error | air):           user.idea("action GotoPreviousError")

  fix next (error | air):
      user.idea("action GotoNextError")
      user.idea("action ShowIntentionActions")

  fix last (error | air):
      user.idea("action GotoPreviousError")
      user.idea("action ShowIntentionActions")

  # Special Selects
  select less:                     user.idea("action EditorUnSelectWord")
  select (more | this):            user.idea("action EditorSelectWord")

  # jet brains-specific line commands. see line_commands.talon for generic ones
  expand <number> until <number>:
      user.select_range(number_1, number_2)
      user.idea("action ExpandRegion")

  collapse <number> until <number>:
      user.select_range(number_1, number_2)
      user.idea("action CollapseRegion")

  paste <number> until <number>:
      user.select_range(number_1, number_2)
      user.idea("action EditorPaste")

  refactor <number> until <number>:
      user.select_range(number_1, number_2)
      user.idea("action Refactorings.QuickListPopupAction")

  clone <number>:                  user.line_clone(number)

  # find/replace
  clear last <user.text> [over]:
      user.idea("find prev{text}, action EditorBackSpace")

  clear next <user.text> [over]:
      user.idea("find next{text}, action EditorBackSpace")

  comment last <user.text> [over]:
      user.idea("find prev{text}, action CommentByLineComment")

  comment next <user.text> [over]:
      user.idea("find next{text}, action CommentByLineComment")

  go last <user.text> [over]:
      user.idea("find prev{text}, action EditorRight")

  go next <user.text> [over]:
      user.idea("find next{text}, action EditorRight")

  paste last <user.text> [over]:
      user.idea("find prev{text}, action EditorRight, action EditorPaste")

  paste next <user.text> [over]:
      user.idea("find next{text}, action EditorRight, action EditorPaste")

  refactor last <user.text> [over]:
      user.idea("find prev{text}, action Refactorings.QuickListPopupAction")

  refactor next <user.text> [over]:
      user.idea("find next{text}, action Refactorings.QuickListPopupAction")

  replace last <user.text> [over]:
      user.idea("find prev{text}, action EditorPaste")

  replace next <user.text> [over]:
      user.idea("find next{text}, action EditorPaste")

  select last <user.text> [over]:
      user.idea("find prev{text}")

  select next <user.text> [over]:
      user.idea("find next{text}")

  select camel left:
      user.extend_camel_left()

  select camel right:
      user.extend_camel_right()

  go camel left:
      user.camel_left()

  go camel right:
      user.camel_right()

  # requires plug-in: black-pycharm
  blacken:                         user.idea("action BLACKReformatCode")
