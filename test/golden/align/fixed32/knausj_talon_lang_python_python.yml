input: "tag: user.python\n-\ntag(): user.code_imperative\ntag(): user.code_object_oriented\n\
  \ntag(): user.code_comment_line\ntag(): user.code_comment_documentation\ntag():\
  \ user.code_data_bool\ntag(): user.code_data_null\ntag(): user.code_functions\n\
  tag(): user.code_functions_common\ntag(): user.code_keywords\ntag(): user.code_libraries\n\
  tag(): user.code_libraries_gui\ntag(): user.code_operators_array\ntag(): user.code_operators_assignment\n\
  tag(): user.code_operators_bitwise\ntag(): user.code_operators_math\n\nsettings():\n\
  \    user.code_private_function_formatter = \"SNAKE_CASE\"\n    user.code_protected_function_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_public_function_formatter = \"SNAKE_CASE\"\n \
  \   user.code_private_variable_formatter = \"SNAKE_CASE\"\n    user.code_protected_variable_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_public_variable_formatter = \"SNAKE_CASE\"\n\n\
  #python-specific grammars\ndunder in it: \"__init__\"\nstate (def | deaf | deft):\
  \ \"def \"\nstate try: \"try:\\n\"\nstate except: \"except \"\nstate raise: \"raise\
  \ \"\nself taught: \"self.\"\npie test: \"pytest\"\nstate past: \"pass\"\n\nraise\
  \ {user.python_exception}: user.insert_between(\"raise {python_exception}(\", \"\
  )\")\nexcept {user.python_exception}: \"except {python_exception}:\"\n\ndock string:\n\
  \    user.code_comment_documentation()\ndock {user.python_docstring_fields}:\n \
  \   insert(\"{python_docstring_fields}\")\n    edit.left()\ndock type {user.code_type}:\n\
  \    user.insert_between(\":type \", \": {code_type}\")\ndock returns type {user.code_type}:\n\
  \    user.insert_between(\":rtype \", \": {code_type}\")\n\ntoggle imports: user.code_toggle_libraries()\n\
  import <user.code_libraries>:\n    user.code_insert_library(code_libraries, \"\"\
  )\n    key(end enter)\n\nfrom import: user.insert_between(\"from \", \" import \"\
  )\n"
output: |
  tag: user.python

  -
  tag(): user.code_imperative
  tag(): user.code_object_oriented
  tag(): user.code_comment_line
  tag(): user.code_comment_documentation
  tag(): user.code_data_bool
  tag(): user.code_data_null
  tag(): user.code_functions
  tag(): user.code_functions_common
  tag(): user.code_keywords
  tag(): user.code_libraries
  tag(): user.code_libraries_gui
  tag(): user.code_operators_array
  tag(): user.code_operators_assignment
  tag(): user.code_operators_bitwise
  tag(): user.code_operators_math
  settings():
      user.code_private_function_formatter = "SNAKE_CASE"
      user.code_protected_function_formatter = "SNAKE_CASE"
      user.code_public_function_formatter = "SNAKE_CASE"
      user.code_private_variable_formatter = "SNAKE_CASE"
      user.code_protected_variable_formatter = "SNAKE_CASE"
      user.code_public_variable_formatter = "SNAKE_CASE"
  # python-specific grammars
  dunder in it:
      "__init__"

  state (def | deaf | deft):
      "def"

  state try:
      "try:\n"

  state except:
      "except"

  state raise:
      "raise"

  self taught:
      "self."

  pie test:
      "pytest"

  state past:
      "pass"

  raise {user.python_exception}:
      user.insert_between("raise{python_exception}(", ")")

  except {user.python_exception}:
      "except{python_exception}:"

  dock string:
      user.code_comment_documentation()

  dock {user.python_docstring_fields}:
      insert("{python_docstring_fields}")
      edit.left()

  dock type {user.code_type}:
      user.insert_between(":type", ":{code_type}")

  dock returns type {user.code_type}:
      user.insert_between(":rtype", ":{code_type}")

  toggle imports:
      user.code_toggle_libraries()

  import <user.code_libraries>:
      user.code_insert_library(code_libraries, "")
      key(end enter)

  from import:                     user.insert_between("from", "import")
