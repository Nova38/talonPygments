input: |
  tag: user.vimscript
  -
  tag(): user.code_imperative
  tag(): user.code_operators_assignment
  tag(): user.code_operators_math
  tag(): user.code_comment_line

  # XXX - revisit these
  settings():
      user.code_private_function_formatter = "SNAKE_CASE"
      user.code_protected_function_formatter = "SNAKE_CASE"
      user.code_public_function_formatter = "SNAKE_CASE"
      user.code_private_variable_formatter = "SNAKE_CASE"
      user.code_protected_variable_formatter = "SNAKE_CASE"
      user.code_public_variable_formatter = "SNAKE_CASE"

  ###
  # VIM Script Specific
  ###
  assign [<user.vimscript_scope>] (variable|var) [<user.text>] [over]:
      insert("let ")
      insert(vimscript_scope or '')
      user.code_private_variable_formatter(text)

  [<user.vimscript_scope>] (variable|var) [<user.text>] [over]:
      insert(vimscript_scope or '')
      user.code_private_variable_formatter(text)

  # see lang/vimscript/vimscript.py for list
  <user.vimscript_functions>:
      insert("{vimscript_functions} ")

  # XXX - possibly overlap with some programming.talon
  state command: "command! "
  state end if: "endif"
  state end for: "endfor"
  state end while: "endwhile"
  state end function: "endfunction"
  state continue: "continue"
output: "tag: user.vimscript\n\n-\ntag(): user.code_imperative\ntag(): user.code_operators_assignment\n\
  tag(): user.code_operators_math\ntag(): user.code_comment_line\n# XXX - revisit\
  \ these\nsettings():\n    user.code_private_function_formatter = \"SNAKE_CASE\"\n\
  \    user.code_protected_function_formatter = \"SNAKE_CASE\"\n    user.code_public_function_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_private_variable_formatter = \"SNAKE_CASE\"\n\
  \    user.code_protected_variable_formatter = \"SNAKE_CASE\"\n    user.code_public_variable_formatter\
  \ = \"SNAKE_CASE\"\n# \n# VIM Script Specific\n# \nassign [<user.vimscript_scope>]\
  \ (variable | var) [<user.text>] [over]:\n    insert(\"let\")\n    insert(vimscript_scope\
  \ or \"\")\n    user.code_private_variable_formatter(text)\n\n[<user.vimscript_scope>]\
  \ (variable | var) [<user.text>] [over]:\n    insert(vimscript_scope or \"\")\n\
  \    user.code_private_variable_formatter(text)\n\n# see lang/vimscript/vimscript.py\
  \ for list\n<user.vimscript_functions>: insert(\"{vimscript_functions}\")\n\n# XXX\
  \ - possibly overlap with some programming.talon\nstate command:      \"command!\"\
  \nstate end if:       \"endif\"\nstate end for:      \"endfor\"\nstate end while:\
  \    \"endwhile\"\nstate end function: \"endfunction\"\nstate continue:     \"continue\"\
  \n"
