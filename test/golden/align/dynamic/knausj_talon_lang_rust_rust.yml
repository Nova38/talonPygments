input: "tag: user.rust\n-\ntag(): user.code_comment_line\ntag(): user.code_comment_block_c_like\n\
  tag(): user.code_comment_documentation\n\ntag(): user.code_imperative\ntag(): user.code_object_oriented\n\
  \ntag(): user.code_data_bool\ntag(): user.code_data_null\n\ntag(): user.code_functions\n\
  tag(): user.code_functions_common\ntag(): user.code_libraries\ntag(): user.code_libraries_gui\n\
  \ntag(): user.code_operators_array\ntag(): user.code_operators_assignment\ntag():\
  \ user.code_operators_bitwise\ntag(): user.code_operators_math\n\nsettings():\n\
  \    user.code_private_function_formatter = \"SNAKE_CASE\"\n    user.code_protected_function_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_public_function_formatter = \"SNAKE_CASE\"\n \
  \   user.code_private_variable_formatter = \"SNAKE_CASE\"\n    user.code_protected_variable_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_public_variable_formatter = \"SNAKE_CASE\"\n\n\
  # rust-specific grammars\n\n## for unsafe rust\nstate unsafe: \"unsafe \"\nunsafe\
  \ block: user.code_state_unsafe()\n\n## rust centric struct and enum definitions\n\
  state (struct | structure) <user.text>:\n    insert(\"struct \")\n    insert(user.formatted_text(text,\
  \ \"PUBLIC_CAMEL_CASE\"))\n\nstate enum <user.text>:\n    insert(\"enum \")\n  \
  \  insert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))\n\ntoggle use: user.code_toggle_libraries()\n\
  \n## Simple aliases\nborrow: \"&\"\nborrow mutable: \"&mut \"\nstate (pub | public):\
  \ \"pub \"\nstate (pub | public) crate: \"pub(crate) \"\nstate (dyn | dynamic):\
  \ \"dyn \"\nstate constant: \"const \"\nstate (funk | func | function): \"fn \"\n\
  state (imp | implements): \"impl \"\nstate let mute: \"let mut \"\nstate let: \"\
  let \"\nstate (mute | mutable): \"mut \"\nstate (mod | module): \"mod \"\nstate\
  \ ref (mute | mutable): \"ref mut \"\nstate ref: \"ref \"\nstate trait: \"trait\
  \ \"\nstate match: user.code_state_switch()\nstate (some | sum): \"Some\"\nstate\
  \ static: \"static \"\nself taught: \"self.\"\nstate use: user.code_import()\n\n\
  use <user.code_libraries>:\n    user.code_insert_library(code_libraries, \"\")\n\
  \    key(semicolon enter)\n\n## specialist flow control\nstate if let some: user.code_insert_if_let_some()\n\
  state if let error: user.code_insert_if_let_error()\n\n## rust centric synonyms\n\
  is some: user.code_insert_is_not_null()\n\n## for implementing\nimplement (struct\
  \ | structure): user.code_state_implements()\n\n## for annotating function parameters\n\
  is implemented trait {user.code_trait}: user.code_insert_trait_annotation(code_trait)\n\
  is implemented trait: \": impl \"\nreturns implemented trait {user.code_trait}:\
  \ user.code_insert_return_trait(code_trait)\nreturns implemented trait: \" -> impl\
  \ \"\n\n## for generic reference of traits\ntrait {user.code_trait}: insert(\"{code_trait}\"\
  )\nimplemented trait {user.code_trait}: insert(\"impl {code_trait}\")\ndynamic trait\
  \ {user.code_trait}: insert(\"dyn {code_trait}\")\n\n## for generic reference of\
  \ macro\nmacro {user.code_macros}:\n    user.code_insert_macro(code_macros, \"\"\
  )\nmacro wrap {user.code_macros}:\n    user.code_insert_macro(code_macros, edit.selected_text())\n\
  \n## rust specific document comments\nblock dock comment: user.code_comment_documentation_block()\n\
  inner dock comment: user.code_comment_documentation_inner()\ninner block dock comment:\
  \ user.code_comment_documentation_block_inner()\n"
output: |
  tag: user.rust

  -
  tag(): user.code_comment_line
  tag(): user.code_comment_block_c_like
  tag(): user.code_comment_documentation
  tag(): user.code_imperative
  tag(): user.code_object_oriented
  tag(): user.code_data_bool
  tag(): user.code_data_null
  tag(): user.code_functions
  tag(): user.code_functions_common
  tag(): user.code_libraries
  tag(): user.code_libraries_gui
  tag(): user.code_operators_array
  tag(): user.code_operators_assignment
  tag(): user.code_operators_bitwise
  tag(): user.code_operators_math
  settings():
      user.code_private_function_formatter = "SNAKE_CASE"
      user.code_protected_function_formatter = "SNAKE_CASE"
      user.code_public_function_formatter = "SNAKE_CASE"
      user.code_private_variable_formatter = "SNAKE_CASE"
      user.code_protected_variable_formatter = "SNAKE_CASE"
      user.code_public_variable_formatter = "SNAKE_CASE"
  # rust-specific grammars
  # for unsafe rust
  state unsafe: "unsafe"
  unsafe block: user.code_state_unsafe()

  # rust centric struct and enum definitions
  state (struct | structure) <user.text>:
      insert("struct")
      insert(user.formatted_text(text, "PUBLIC_CAMEL_CASE"))

  state enum <user.text>:
      insert("enum")
      insert(user.formatted_text(text, "PUBLIC_CAMEL_CASE"))

  toggle use: user.code_toggle_libraries()

  # Simple aliases
  borrow:                         "&"
  borrow mutable:                 "&mut"
  state (pub | public):           "pub"
  state (pub | public) crate:     "pub(crate)"
  state (dyn | dynamic):          "dyn"
  state constant:                 "const"
  state (funk | func | function): "fn"
  state (imp | implements):       "impl"
  state let mute:                 "let mut"
  state let:                      "let"
  state (mute | mutable):         "mut"
  state (mod | module):           "mod"
  state ref (mute | mutable):     "ref mut"
  state ref:                      "ref"
  state trait:                    "trait"
  state match:                    user.code_state_switch()
  state (some | sum):             "Some"
  state static:                   "static"
  self taught:                    "self."
  state use:                      user.code_import()

  use <user.code_libraries>:
      user.code_insert_library(code_libraries, "")
      key(semicolon enter)

  # specialist flow control
  state if let some:  user.code_insert_if_let_some()
  state if let error: user.code_insert_if_let_error()

  # rust centric synonyms
  is some: user.code_insert_is_not_null()

  # for implementing
  implement (struct | structure): user.code_state_implements()

  # for annotating function parameters
  is implemented trait {user.code_trait}:
      user.code_insert_trait_annotation(code_trait)

  is implemented trait:
      ": impl"

  returns implemented trait {user.code_trait}:
      user.code_insert_return_trait(code_trait)

  returns implemented trait:
      "-> impl"

  # for generic reference of traits
  trait {user.code_trait}:             insert("{code_trait}")
  implemented trait {user.code_trait}: insert("impl{code_trait}")
  dynamic trait {user.code_trait}:     insert("dyn{code_trait}")

  # for generic reference of macro
  macro {user.code_macros}:
      user.code_insert_macro(code_macros, "")

  macro wrap {user.code_macros}:
      user.code_insert_macro(code_macros, edit.selected_text())

  # rust specific document comments
  block dock comment:       user.code_comment_documentation_block()
  inner dock comment:       user.code_comment_documentation_inner()
  inner block dock comment: user.code_comment_documentation_block_inner()
