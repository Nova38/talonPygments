input: "talon check updates: menu.check_for_updates()\ntalon open log: menu.open_log()\n\
  talon open rebel: menu.open_repl()\ntalon home: menu.open_talon_home()\ntalon copy\
  \ context pie: user.talon_add_context_clipboard_python()\ntalon copy context: user.talon_add_context_clipboard()\n\
  talon copy name:\n    name = app.name()\n    clip.set_text(name)\ntalon copy executable:\n\
  \    executable = app.executable()\n    clip.set_text(executable)\ntalon copy bundle:\n\
  \    bundle = app.bundle()\n    clip.set_text(bundle)\ntalon copy title:\n    title\
  \ = win.title()\n    clip.set_text(title)\ntalon dump version:\n    result = user.talon_version_info()\n\
  \    print(result)\ntalon insert version:\n    result = user.talon_version_info()\n\
  \    user.paste(result)\ntalon dump context:\n    result = user.talon_get_active_context()\n\
  \    print(result)\n^talon test last$:\n    phrase = user.history_get(1)\n    user.talon_sim_phrase(phrase)\n\
  ^talon test numb <number_small>$:\n    phrase = user.history_get(number_small)\n\
  \    user.talon_sim_phrase(phrase)\n^talon test <phrase>$:\n    user.talon_sim_phrase(phrase)\n\
  ^talon debug action {user.talon_actions}$:\n    user.talon_action_find(\"{user.talon_actions}\"\
  )\n^talon debug list {user.talon_lists}$:\n    user.talon_debug_list(talon_lists)\n\
  ^talon copy list {user.talon_lists}$:\n    user.talon_copy_list(talon_lists)\n^talon\
  \ debug tags$:\n    user.talon_debug_tags()\n^talon debug modes$:\n    user.talon_debug_modes()\n\
  ^talon debug scope {user.talon_scopes}$:\n    user.talon_debug_scope(talon_scopes)\n\
  ^talon debug setting {user.talon_settings}$:\n    user.talon_debug_setting(talon_settings)\n\
  ^talon debug all settings$:\n    user.talon_debug_all_settings()\n^talon debug active\
  \ app$:\n    result = user.talon_get_active_application_info()\n    print(\"****\
  \ Dumping active application **** \")\n    print(result)\n    print(\"***********************\"\
  )\n^talon copy active app$:\n    result = user.talon_get_active_application_info()\n\
  \    clip.set_text(result)\n\ntalon (bug report|report bug): user.open_url('https://github.com/knausj85/knausj_talon/issues')\n"
output: |
  -
  talon check updates:    menu.check_for_updates()
  talon open log:         menu.open_log()
  talon open rebel:       menu.open_repl()
  talon home:             menu.open_talon_home()
  talon copy context pie: user.talon_add_context_clipboard_python()
  talon copy context:     user.talon_add_context_clipboard()

  talon copy name:
      name = app.name()
      clip.set_text(name)

  talon copy executable:
      executable = app.executable()
      clip.set_text(executable)

  talon copy bundle:
      bundle = app.bundle()
      clip.set_text(bundle)

  talon copy title:
      title = win.title()
      clip.set_text(title)

  talon dump version:
      result = user.talon_version_info()
      print(result)

  talon insert version:
      result = user.talon_version_info()
      user.paste(result)

  talon dump context:
      result = user.talon_get_active_context()
      print(result)

  ^ talon test last $:
      phrase = user.history_get(1)
      user.talon_sim_phrase(phrase)

  ^ talon test numb <number_small> $:
      phrase = user.history_get(number_small)
      user.talon_sim_phrase(phrase)

  ^ talon test <phrase> $:
      user.talon_sim_phrase(phrase)

  ^ talon debug action {user.talon_actions} $:
      user.talon_action_find("{user.talon_actions}")

  ^ talon debug list {user.talon_lists} $:
      user.talon_debug_list(talon_lists)

  ^ talon copy list {user.talon_lists} $:
      user.talon_copy_list(talon_lists)

  ^ talon debug tags $:
      user.talon_debug_tags()

  ^ talon debug modes $:
      user.talon_debug_modes()

  ^ talon debug scope {user.talon_scopes} $:
      user.talon_debug_scope(talon_scopes)

  ^ talon debug setting {user.talon_settings} $:
      user.talon_debug_setting(talon_settings)

  ^ talon debug all settings $:
      user.talon_debug_all_settings()

  ^ talon debug active app $:
      result = user.talon_get_active_application_info()
      print("**** Dumping active application ****")
      print(result)
      print("***********************")

  ^ talon copy active app $:
      result = user.talon_get_active_application_info()
      clip.set_text(result)

  talon (bug report | report bug):
      user.open_url("https://github.com/knausj85/knausj_talon/issues")
