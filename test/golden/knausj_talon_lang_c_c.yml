input: "tag: user.c\n-\ntag(): user.code_imperative\n\ntag(): user.code_comment_line\n\
  tag(): user.code_comment_block_c_like\ntag(): user.code_data_bool\ntag(): user.code_data_null\n\
  tag(): user.code_functions\ntag(): user.code_functions_common\ntag(): user.code_libraries\n\
  tag(): user.code_libraries_gui\ntag(): user.code_operators_array\ntag(): user.code_operators_assignment\n\
  tag(): user.code_operators_bitwise\ntag(): user.code_operators_math\ntag(): user.code_operators_pointer\n\
  \nsettings():\n    user.code_private_function_formatter = \"SNAKE_CASE\"\n    user.code_protected_function_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_public_function_formatter = \"SNAKE_CASE\"\n \
  \   user.code_private_variable_formatter = \"SNAKE_CASE\"\n    user.code_protected_variable_formatter\
  \ = \"SNAKE_CASE\"\n    user.code_public_variable_formatter = \"SNAKE_CASE\"\n \
  \   # whether or not to use uint_8 style datatypes\n    #    user.use_stdint_datatypes\
  \ = 1\n\n# NOTE: migrated from generic, as they were only used here, though once\
  \ cpp support is added, perhaps these should be migrated to a tag together with\
  \ the commands below\nstate include:\n    insert('#include ')\nstate include system:\n\
  \    user.insert_between(\"#include <\", \">\")\nstate include local:\n    user.insert_between('#include\
  \ \"', '\"')\nstate type deaf:\n    insert('typedef ')\nstate type deaf struct:\n\
  \    insert('typedef struct')\n    insert('{\\n\\n}')\n    edit.up()\n    key('tab')\n\
  \n\n# XXX - create a preprocessor tag for these, as they will match cpp, etc\nstate\
  \ define: \"#define \"\nstate undefine: \"#undef \"\nstate if define: \"#ifdef \"\
  \n\n# XXX - preprocessor instead of pre?\nstate pre if: \"#if \"\nstate error: \"\
  #error \"\nstate pre else if: \"#elif \"\nstate pre end: \"#endif \"\nstate pragma:\
  \ \"#pragma \"\nstate default: \"default:\\nbreak;\"\n\n#control flow\n#best used\
  \ with a push like command\n#the below example may not work in editors that automatically\
  \ add the closing bracket\n#if so uncomment the two lines and comment out the rest\
  \ accordingly\npush brackets:\n    edit.line_end()\n    #insert(\"{\")\n    #key(enter)\n\
  \    insert(\"{}\")\n    edit.left()\n    key(enter)\n    key(enter)\n    edit.up()\n\
  \n# Declare variables or structs etc.\n# Ex. * int myList\n<user.c_variable> <phrase>:\n\
  \    insert(\"{c_variable} \")\n    insert(user.formatted_text(phrase, \"PRIVATE_CAMEL_CASE,NO_SPACES\"\
  ))\n\n<user.c_variable> <user.letter>:\n    insert(\"{c_variable} {letter} \")\n\
  \n# Ex. (int *)\ncast to <user.c_cast>: \"{c_cast}\"\nstandard cast to <user.stdint_cast>:\
  \ \"{stdint_cast}\"\n<user.c_types>: \"{c_types}\"\n<user.c_pointers>: \"{c_pointers}\"\
  \n<user.c_keywords>: \"{c_keywords}\"\n<user.c_signed>: \"{c_signed}\"\nstandard\
  \ <user.stdint_types>: \"{stdint_types}\"\nint main:\n    user.insert_between(\"\
  int main(\", \")\")\n\ntoggle includes: user.code_toggle_libraries()\ninclude <user.code_libraries>:\n\
  \    user.code_insert_library(code_libraries, \"\")\n    key(end enter)\n"
output:
  type: source_file
  children:
  - type: context
    children:
    - type: match
      key:
        text: tag
        type: identifier
      pattern:
        text: ' user.c'
        type: implicit_string
  - type: include_tag
    tag:
      text: user.code_imperative
      type: identifier
  - type: include_tag
    tag:
      text: user.code_comment_line
      type: identifier
  - type: include_tag
    tag:
      text: user.code_comment_block_c_like
      type: identifier
  - type: include_tag
    tag:
      text: user.code_data_bool
      type: identifier
  - type: include_tag
    tag:
      text: user.code_data_null
      type: identifier
  - type: include_tag
    tag:
      text: user.code_functions
      type: identifier
  - type: include_tag
    tag:
      text: user.code_functions_common
      type: identifier
  - type: include_tag
    tag:
      text: user.code_libraries
      type: identifier
  - type: include_tag
    tag:
      text: user.code_libraries_gui
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_array
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_assignment
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_bitwise
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_math
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_pointer
      type: identifier
  - type: settings
    children:
    - type: block
      children:
      - type: assignment
        left:
          text: user.code_private_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_protected_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_public_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_private_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_protected_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_public_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - text: '# whether or not to use uint_8 style datatypes'
        type: comment
      - text: '#    user.use_stdint_datatypes = 1'
        type: comment
  - text: '# NOTE: migrated from generic, as they were only used here, though once
      cpp support is added, perhaps these should be migrated to a tag together with
      the commands below'
    type: comment
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: include
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '#include '
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: include
          type: word
        - text: system
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.insert_between
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '#include <'
                type: string_content
            - type: string
              children:
              - text: '>'
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: include
          type: word
        - text: local
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.insert_between
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '#include "'
                type: string_content
            - type: string
              children:
              - text: '"'
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: type
          type: word
        - text: deaf
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: 'typedef '
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: type
          type: word
        - text: deaf
          type: word
        - text: struct
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: typedef struct
                type: string_content
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '{'
                type: string_content
              - text: \n
                type: string_escape_sequence
              - text: \n
                type: string_escape_sequence
              - text: '}'
                type: string_content
      - type: expression
        expression:
          type: action
          action_name:
            text: edit.up
            type: identifier
          arguments:
            type: argument_list
            children: []
      - type: expression
        expression:
          type: key_action
          arguments:
            text: "'tab'"
            type: implicit_string
  - text: '# XXX - create a preprocessor tag for these, as they will match cpp, etc'
    type: comment
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: define
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#define '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: undefine
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#undef '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: if
          type: word
        - text: define
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#ifdef '
            type: string_content
  - text: '# XXX - preprocessor instead of pre?'
    type: comment
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: pre
          type: word
        - text: if
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#if '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: error
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#error '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: pre
          type: word
        - text: else
          type: word
        - text: if
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#elif '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: pre
          type: word
        - text: end
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#endif '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: pragma
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '#pragma '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: default
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: 'default:'
            type: string_content
          - text: \n
            type: string_escape_sequence
          - text: break;
            type: string_content
  - text: '#control flow'
    type: comment
  - text: '#best used with a push like command'
    type: comment
  - text: '#the below example may not work in editors that automatically add the closing
      bracket'
    type: comment
  - text: '#if so uncomment the two lines and comment out the rest accordingly'
    type: comment
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: push
          type: word
        - text: brackets
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: edit.line_end
            type: identifier
          arguments:
            type: argument_list
            children: []
      - text: '#insert("{")'
        type: comment
      - text: '#key(enter)'
        type: comment
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '{'
                type: string_content
              - text: '}'
                type: string_content
      - type: expression
        expression:
          type: action
          action_name:
            text: edit.left
            type: identifier
          arguments:
            type: argument_list
            children: []
      - type: expression
        expression:
          type: key_action
          arguments:
            text: enter
            type: implicit_string
      - type: expression
        expression:
          type: key_action
          arguments:
            text: enter
            type: implicit_string
      - type: expression
        expression:
          type: action
          action_name:
            text: edit.up
            type: identifier
          arguments:
            type: argument_list
            children: []
  - text: '# Declare variables or structs etc.'
    type: comment
  - text: '# Ex. * int myList'
    type: comment
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - type: capture
          capture_name:
            text: user.c_variable
            type: identifier
        - type: capture
          capture_name:
            text: phrase
            type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '{'
                type: string_content
              - text: c_variable
                type: string_content
              - text: '}'
                type: string_content
              - text: ' '
                type: string_content
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: action
              action_name:
                text: user.formatted_text
                type: identifier
              arguments:
                type: argument_list
                children:
                - type: variable
                  variable_name:
                    text: phrase
                    type: identifier
                - type: string
                  children:
                  - text: PRIVATE_CAMEL_CASE,NO_SPACES
                    type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - type: capture
          capture_name:
            text: user.c_variable
            type: identifier
        - type: capture
          capture_name:
            text: user.letter
            type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '{'
                type: string_content
              - text: c_variable
                type: string_content
              - text: '}'
                type: string_content
              - text: ' '
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              - text: ' '
                type: string_content
  - text: '# Ex. (int *)'
    type: comment
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: cast
          type: word
        - text: to
          type: word
        - type: capture
          capture_name:
            text: user.c_cast
            type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '{'
            type: string_content
          - text: c_cast
            type: string_content
          - text: '}'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: standard
          type: word
        - text: cast
          type: word
        - text: to
          type: word
        - type: capture
          capture_name:
            text: user.stdint_cast
            type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '{'
            type: string_content
          - text: stdint_cast
            type: string_content
          - text: '}'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: capture
        capture_name:
          text: user.c_types
          type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '{'
            type: string_content
          - text: c_types
            type: string_content
          - text: '}'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: capture
        capture_name:
          text: user.c_pointers
          type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '{'
            type: string_content
          - text: c_pointers
            type: string_content
          - text: '}'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: capture
        capture_name:
          text: user.c_keywords
          type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '{'
            type: string_content
          - text: c_keywords
            type: string_content
          - text: '}'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: capture
        capture_name:
          text: user.c_signed
          type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '{'
            type: string_content
          - text: c_signed
            type: string_content
          - text: '}'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: standard
          type: word
        - type: capture
          capture_name:
            text: user.stdint_types
            type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '{'
            type: string_content
          - text: stdint_types
            type: string_content
          - text: '}'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: int
          type: word
        - text: main
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.insert_between
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: int main(
                type: string_content
            - type: string
              children:
              - text: )
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: toggle
          type: word
        - text: includes
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.code_toggle_libraries
            type: identifier
          arguments:
            type: argument_list
            children: []
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: include
          type: word
        - type: capture
          capture_name:
            text: user.code_libraries
            type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.code_insert_library
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: variable
              variable_name:
                text: code_libraries
                type: identifier
            - type: string
              children: []
      - type: expression
        expression:
          type: key_action
          arguments:
            text: end enter
            type: implicit_string
