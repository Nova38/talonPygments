input: "win.title:/repl/\nwin.title:/Talon - REPL/\n-\ntag(): user.talon_python\n\n\
  # uncomment user.talon_populate_lists tag to activate talon-specific lists of actions,\
  \ scopes, modes etcetera.\n# Do not enable this tag with dragon, as it will be unusable.\n\
  # with conformer, the latency increase may also be unacceptable depending on your\
  \ cpu\n# see https://github.com/knausj85/knausj_talon/issues/600\n# tag(): user.talon_populate_lists\n\
  \n^test last$:\n    phrase = user.history_get(1)\n    command = \"sim('{phrase}')\"\
  \n    insert(command)\n    key(enter)\n^test <phrase>$:\n    insert(\"sim('{phrase}')\"\
  )\n    key(enter)\n^test numb <number_small>$:\n    phrase = user.history_get(number_small)\n\
  \    command = \"sim('{phrase}')\"\n    #to do: shouldn't this work?\n    #user.paste(\"\
  sim({phrase})\")\n    insert(command)\n    key(enter)\n# requires user.talon_populate_lists\
  \ tag. do not use with dragon\n^debug action {user.talon_actions}$:\n    insert(\"\
  actions.find('{user.talon_actions}')\")\n    key(enter)\n# requires user.talon_populate_lists\
  \ tag. do not use with dragon\n^debug list {user.talon_lists}$:\n    insert(\"actions.user.talon_pretty_print(registry.lists['{talon_lists}'])\"\
  )\n    key(enter)\n^debug tags$:\n    insert(\"actions.user.talon_pretty_print(registry.tags)\"\
  )\n    key(enter)\n^debug settings$:\n    insert(\"actions.user.talon_pretty_print(registry.settings)\"\
  )\n    key(enter)\n^debug modes$:\n    insert(\"actions.user.talon_pretty_print(scope.get('mode'))\"\
  )\n    key(enter)\n# requires user.talon_populate_lists tag. do not use with dragon\n\
  ^debug scope {user.talon_scopes}$:\n    insert(\"actions.user.talon_pretty_print(scope.get('{talon_scopes}'))\"\
  )\n    key(enter)\n^debug running apps$:\n    insert(\"actions.user.talon_pretty_print(ui.apps(background=False))\"\
  )\n    key(enter)\n^debug all windows$:\n    insert(\"actions.user.talon_pretty_print(ui.windows())\"\
  )\n    key(enter)\n^debug {user.running} windows$:\n    insert(\"actions.user.talon_debug_app_windows('{running}')\"\
  )\n    key(enter)\n"
output: |2-
   win.title: /repl/

   win.title: /Talon - REPL/
  -

  tag(): user.talon_python
  # uncomment user.talon_populate_lists tag to activate talon-specific lists of actions, scopes, modes etcetera.

  # Do not enable this tag with dragon, as it will be unusable.

  # with conformer, the latency increase may also be unacceptable depending on your cpu

  # see https://github.com/knausj85/knausj_talon/issues/600

  # tag(): user.talon_populate_lists

  ^test last$:
      phrase = user.history_get(1)
      command = "sim('{phrase}')"
      insert(command)
      key(enter)
  ^test <phrase>$:
      insert("sim('{phrase}')")
      key(enter)
  ^test numb <number_small>$:
      phrase = user.history_get(number_small)
      command = "sim('{phrase}')"
      # to do: shouldn't this work?

      # user.paste("sim({phrase})")

      insert(command)
      key(enter)
  # requires user.talon_populate_lists tag. do not use with dragon

  ^debug action {user.talon_actions}$:
      insert("actions.find('{user.talon_actions}')")
      key(enter)
  # requires user.talon_populate_lists tag. do not use with dragon

  ^debug list {user.talon_lists}$:
      insert("actions.user.talon_pretty_print(registry.lists['{talon_lists}'])")
      key(enter)
  ^debug tags$:
      insert("actions.user.talon_pretty_print(registry.tags)")
      key(enter)
  ^debug settings$:
      insert("actions.user.talon_pretty_print(registry.settings)")
      key(enter)
  ^debug modes$:
      insert("actions.user.talon_pretty_print(scope.get('mode'))")
      key(enter)
  # requires user.talon_populate_lists tag. do not use with dragon

  ^debug scope {user.talon_scopes}$:
      insert("actions.user.talon_pretty_print(scope.get('{talon_scopes}'))")
      key(enter)
  ^debug running apps$:
      insert("actions.user.talon_pretty_print(ui.apps(background=False))")
      key(enter)
  ^debug all windows$:
      insert("actions.user.talon_pretty_print(ui.windows())")
      key(enter)
  ^debug {user.running} windows$:
      insert("actions.user.talon_debug_app_windows('{running}')")
      key(enter)
