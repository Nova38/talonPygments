input: "tag: user.javascript\n-\ntag(): user.code_imperative\ntag(): user.code_object_oriented\n\
  \ntag(): user.code_comment_line\ntag(): user.code_comment_block_c_like\ntag(): user.code_data_bool\n\
  tag(): user.code_data_null\ntag(): user.code_functions\ntag(): user.code_functions_common\n\
  tag(): user.code_keywords\ntag(): user.code_libraries\ntag(): user.code_operators_array\n\
  tag(): user.code_operators_assignment\ntag(): user.code_operators_bitwise\ntag():\
  \ user.code_operators_lambda\ntag(): user.code_operators_math\n\nsettings():\n \
  \   user.code_private_function_formatter = \"PRIVATE_CAMEL_CASE\"\n    user.code_protected_function_formatter\
  \ = \"PRIVATE_CAMEL_CASE\"\n    user.code_public_function_formatter = \"PRIVATE_CAMEL_CASE\"\
  \n    user.code_private_variable_formatter = \"PRIVATE_CAMEL_CASE\"\n    user.code_protected_variable_formatter\
  \ = \"PRIVATE_CAMEL_CASE\"\n    user.code_public_variable_formatter = \"PRIVATE_CAMEL_CASE\"\
  \n\n(op | is) strict equal: \" === \"\n(op | is) strict not equal: \" !== \"\nop\
  \ null else: \" ?? \"\n\nstate const: \"const \"\n\nstate let: \"let \"\n\nstate\
  \ var: \"var \"\n\nstate export: \"export \"\n\nstate async: \"async \"\n\nstate\
  \ await: \"await \"\n\ndot {user.code_common_member_function}:\n    user.insert_between(\"\
  .{code_common_member_function}(\", \")\")\n\nstate map: app.notify('ERROR: Command\
  \ deprecated; please use \"dot map\"')\nstate filter: app.notify('ERROR: Command\
  \ deprecated; please use \"dot filter\"')\nstate reduce: app.notify('ERROR: Command\
  \ deprecated; please use \"dot reduce\"')\n\nstate spread: \"...\"\n\nfrom import:\n\
  \    user.insert_between(' from  \"', '\"')\n"
output:
  type: source_file
  children:
  - type: context
    children:
    - type: match
      key:
        text: tag
        type: identifier
      pattern:
        text: ' user.javascript'
        type: implicit_string
  - type: include_tag
    tag:
      text: user.code_imperative
      type: identifier
  - type: include_tag
    tag:
      text: user.code_object_oriented
      type: identifier
  - type: include_tag
    tag:
      text: user.code_comment_line
      type: identifier
  - type: include_tag
    tag:
      text: user.code_comment_block_c_like
      type: identifier
  - type: include_tag
    tag:
      text: user.code_data_bool
      type: identifier
  - type: include_tag
    tag:
      text: user.code_data_null
      type: identifier
  - type: include_tag
    tag:
      text: user.code_functions
      type: identifier
  - type: include_tag
    tag:
      text: user.code_functions_common
      type: identifier
  - type: include_tag
    tag:
      text: user.code_keywords
      type: identifier
  - type: include_tag
    tag:
      text: user.code_libraries
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_array
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_assignment
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_bitwise
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_lambda
      type: identifier
  - type: include_tag
    tag:
      text: user.code_operators_math
      type: identifier
  - type: settings
    children:
    - type: block
      children:
      - type: assignment
        left:
          text: user.code_private_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: PRIVATE_CAMEL_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_protected_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: PRIVATE_CAMEL_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_public_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: PRIVATE_CAMEL_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_private_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: PRIVATE_CAMEL_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_protected_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: PRIVATE_CAMEL_CASE
            type: string_content
      - type: assignment
        left:
          text: user.code_public_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: PRIVATE_CAMEL_CASE
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - type: parenthesized_rule
          children:
          - type: choice
            children:
            - text: op
              type: word
            - text: is
              type: word
        - text: strict
          type: word
        - text: equal
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: ' === '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - type: parenthesized_rule
          children:
          - type: choice
            children:
            - text: op
              type: word
            - text: is
              type: word
        - text: strict
          type: word
        - text: not
          type: word
        - text: equal
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: ' !== '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: op
          type: word
        - text: 'null'
          type: word
        - text: else
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: ' ?? '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: const
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: 'const '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: let
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: 'let '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: var
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: 'var '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: export
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: 'export '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: async
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: 'async '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: await
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: 'await '
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: dot
          type: word
        - type: list
          list_name:
            text: user.code_common_member_function
            type: identifier
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.insert_between
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: .
                type: string_content
              - text: '{'
                type: string_content
              - text: code_common_member_function
                type: string_content
              - text: '}'
                type: string_content
              - text: (
                type: string_content
            - type: string
              children:
              - text: )
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: map
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: app.notify
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: 'ERROR: Command deprecated; please use "dot map"'
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: filter
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: app.notify
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: 'ERROR: Command deprecated; please use "dot filter"'
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: reduce
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: app.notify
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: 'ERROR: Command deprecated; please use "dot reduce"'
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: spread
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: string
          children:
          - text: '...'
            type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: from
          type: word
        - text: import
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.insert_between
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: ' from  "'
                type: string_content
            - type: string
              children:
              - text: '"'
                type: string_content
