input: "# NOTE: to use these commands you will need to activate the tag below in whatever\
  \ contexts you\n# choose.\n#\n# do this in a separate .talon file or via python.\
  \ for example, if you use windows terminal for\n# wsl then you might do this:\n\
  #\n#    os: windows\n#    app: windows_terminal\n#    -\n#    tag(): user.wsl\n\
  #\n# however, if you also use windows terminal for other things (powershell), you\
  \ will want something\n# more specific...like this:\n#\n#    os: windows\n#    app:\
  \ windows_terminal\n#    title: /^WSL:/\n#    -\n#    tag(): user.wsl\n#\n# then,\
  \ you will need to find a way to set the window title accordingly. for example,\
  \ to match\n# the title pattern above, you can set the prompt in your .bashrc file\
  \ like this:\n#\n#    PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}WSL:${WSL_DISTRO_NAME}\
  \ \\u@\\h: \\w\\a\\]$PS1\"\n#\n# ALSO: if you do populate your window title with\
  \ your distro name, make sure the 'wsl_title_regex'\n# value in wsl.py is set accordingly.\n\
  tag: user.wsl\n-\n\ntag(): terminal\ntag(): user.file_manager\ntag(): user.generic_unix_shell\n\
  tag(): user.git\ntag(): user.kubectl\n\n^go <user.letter>$: user.file_manager_open_volume(\"\
  /mnt/{letter}\")\n\n(wsl|weasel) reset path detection: user.wsl_reset_path_detection()\n\
  (wsl|weasel) speak: user.wsl_speak()\n"
output:
  type: source_file
  children:
  - text: '# NOTE: to use these commands you will need to activate the tag below in
      whatever contexts you'
    type: comment
  - text: '# choose.'
    type: comment
  - text: '#'
    type: comment
  - text: '# do this in a separate .talon file or via python. for example, if you
      use windows terminal for'
    type: comment
  - text: '# wsl then you might do this:'
    type: comment
  - text: '#'
    type: comment
  - text: '#    os: windows'
    type: comment
  - text: '#    app: windows_terminal'
    type: comment
  - text: '#    -'
    type: comment
  - text: '#    tag(): user.wsl'
    type: comment
  - text: '#'
    type: comment
  - text: '# however, if you also use windows terminal for other things (powershell),
      you will want something'
    type: comment
  - text: '# more specific...like this:'
    type: comment
  - text: '#'
    type: comment
  - text: '#    os: windows'
    type: comment
  - text: '#    app: windows_terminal'
    type: comment
  - text: '#    title: /^WSL:/'
    type: comment
  - text: '#    -'
    type: comment
  - text: '#    tag(): user.wsl'
    type: comment
  - text: '#'
    type: comment
  - text: '# then, you will need to find a way to set the window title accordingly.
      for example, to match'
    type: comment
  - text: '# the title pattern above, you can set the prompt in your .bashrc file
      like this:'
    type: comment
  - text: '#'
    type: comment
  - text: '#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}WSL:${WSL_DISTRO_NAME}
      \u@\h: \w\a\]$PS1"'
    type: comment
  - text: '#'
    type: comment
  - text: "# ALSO: if you do populate your window title with your distro name, make\
      \ sure the 'wsl_title_regex'"
    type: comment
  - text: '# value in wsl.py is set accordingly.'
    type: comment
  - type: context
    children:
    - type: match
      key:
        text: tag
        type: identifier
      pattern:
        text: ' user.wsl'
        type: implicit_string
  - type: include_tag
    tag:
      text: terminal
      type: identifier
  - type: include_tag
    tag:
      text: user.file_manager
      type: identifier
  - type: include_tag
    tag:
      text: user.generic_unix_shell
      type: identifier
  - type: include_tag
    tag:
      text: user.git
      type: identifier
  - type: include_tag
    tag:
      text: user.kubectl
      type: identifier
  - type: command
    rule:
      type: rule
      children:
      - text: ^
        type: start_anchor
      - type: seq
        children:
        - text: go
          type: word
        - type: capture
          capture_name:
            text: user.letter
            type: identifier
      - text: $
        type: end_anchor
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.file_manager_open_volume
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - type: parenthesized_rule
          children:
          - type: choice
            children:
            - text: wsl
              type: word
            - text: weasel
              type: word
        - text: reset
          type: word
        - text: path
          type: word
        - text: detection
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.wsl_reset_path_detection
            type: identifier
          arguments:
            type: argument_list
            children: []
  - type: command
    rule:
      type: rule
      children:
      - type: seq
        children:
        - type: parenthesized_rule
          children:
          - type: choice
            children:
            - text: wsl
              type: word
            - text: weasel
              type: word
        - text: speak
          type: word
    script:
      type: block
      children:
      - type: expression
        expression:
          type: action
          action_name:
            text: user.wsl_speak
            type: identifier
          arguments:
            type: argument_list
            children: []
